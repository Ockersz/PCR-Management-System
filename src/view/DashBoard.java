/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controler.ChartManagement;
import controler.ManageReports;
import controler.MessageManagement;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;

import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author lihin
 */
public class DashBoard extends javax.swing.JFrame {

    /**
     * Creates new form DashBoard
     */
    public DashBoard() {
        initComponents();
        this.setTitle("DASHBOARD");
        getTopic();

    }

    void getTopic() {

        Thread t = new Thread() {
            @Override
            public void run() {

                String names[] = {"P", " ", "C", " ", "R ", " ", " ", " ", "M", " ", "A", " ", "N", " ", "A", " ", "G", " ", "E", " ", "M", " ", "E", " ", "N", " ", "T", " ", " ", " ", "S", " ", "Y", " ", "S", " ", "T", " ", "E", " ", "M"};

                String title = "";
                for (int i = 0; i < names.length; i++) {

                    title = title + names[i];
                    try {
                        lblHeader.setText(title);
                        Thread.sleep(200);
                    } catch (Exception e) {
                    }
                }
            }

        };
        Thread t2 = new Thread() {
            @Override
            public void run() {

                while (true) {

                    try {
                        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy ");
                        formatter = new SimpleDateFormat("HH:mm:ss");
                        Date time = new Date();
                        lblTime.setText(formatter.format(time));

                        Thread.sleep(1000);
                    } catch (Exception e) {
                    }

                }
            }

        };
        t.setPriority(1);
        t2.setPriority(2);
        t.start();
        t2.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDashBack = new java.awt.Panel();
        pnlDashTop = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        pnlDashLeft = new javax.swing.JPanel();
        btnAllTest = new javax.swing.JButton();
        btnPossitiveDistrict = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnTestedTest = new javax.swing.JButton();
        pnlDashMid = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuAdmin = new javax.swing.JMenu();
        mnuAll = new javax.swing.JMenuItem();
        mnuPosstive = new javax.swing.JMenuItem();
        mnuNegativeCases = new javax.swing.JMenuItem();
        mnuRBNIC = new javax.swing.JMenuItem();
        mnuRBD = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlDashBack.setBackground(new java.awt.Color(0, 204, 204));

        pnlDashTop.setBackground(new java.awt.Color(38, 67, 72));
        pnlDashTop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblHeader.setFont(new java.awt.Font("PMingLiU-ExtB", 1, 36)); // NOI18N
        lblHeader.setForeground(new java.awt.Color(153, 153, 153));
        lblHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagesandicons/microscope_medical_10737.png"))); // NOI18N
        lblHeader.setText("T I T L E");
        lblHeader.setToolTipText("");
        lblHeader.setIconTextGap(10);

        lblTime.setFont(new java.awt.Font("Lucida Calligraphy", 1, 14)); // NOI18N
        lblTime.setForeground(new java.awt.Color(204, 204, 204));
        lblTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTime.setText("jLabel1");

        javax.swing.GroupLayout pnlDashTopLayout = new javax.swing.GroupLayout(pnlDashTop);
        pnlDashTop.setLayout(pnlDashTopLayout);
        pnlDashTopLayout.setHorizontalGroup(
            pnlDashTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDashTopLayout.createSequentialGroup()
                .addContainerGap(307, Short.MAX_VALUE)
                .addComponent(lblHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 1222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170)
                .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlDashTopLayout.setVerticalGroup(
            pnlDashTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
            .addGroup(pnlDashTopLayout.createSequentialGroup()
                .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnlDashLeft.setBackground(new java.awt.Color(0, 130, 127));
        pnlDashLeft.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnlDashLeft.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAllTest.setBackground(new java.awt.Color(0, 66, 54));
        btnAllTest.setForeground(new java.awt.Color(255, 255, 255));
        btnAllTest.setText("All Recieved Test chart");
        btnAllTest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAllTestMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAllTestMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAllTestMouseExited(evt);
            }
        });
        btnAllTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllTestActionPerformed(evt);
            }
        });
        pnlDashLeft.add(btnAllTest, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 21, 332, 33));

        btnPossitiveDistrict.setBackground(new java.awt.Color(0, 66, 54));
        btnPossitiveDistrict.setForeground(new java.awt.Color(255, 255, 255));
        btnPossitiveDistrict.setText("All Tested Tests chart");
        btnPossitiveDistrict.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPossitiveDistrictMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPossitiveDistrictMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPossitiveDistrictMouseExited(evt);
            }
        });
        pnlDashLeft.add(btnPossitiveDistrict, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 332, 33));

        jButton3.setBackground(new java.awt.Color(0, 66, 54));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Recent Updated Data");
        jButton3.setToolTipText("Go to \"https://www.worldometers.info/coronavirus/country/sri-lanka/\"");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        pnlDashLeft.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 650, 332, 33));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagesandicons/vaccine.png"))); // NOI18N
        pnlDashLeft.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 337, 500));

        btnTestedTest.setBackground(new java.awt.Color(0, 66, 54));
        btnTestedTest.setForeground(new java.awt.Color(255, 255, 255));
        btnTestedTest.setText("Possitive Cases according to the district");
        btnTestedTest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTestedTestMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnTestedTestMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnTestedTestMouseExited(evt);
            }
        });
        pnlDashLeft.add(btnTestedTest, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 332, 33));

        pnlDashMid.setBackground(new java.awt.Color(0, 255, 255));
        pnlDashMid.setLayout(new java.awt.BorderLayout());

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        pnlDashMid.add(jPanel1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout pnlDashBackLayout = new javax.swing.GroupLayout(pnlDashBack);
        pnlDashBack.setLayout(pnlDashBackLayout);
        pnlDashBackLayout.setHorizontalGroup(
            pnlDashBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDashBackLayout.createSequentialGroup()
                .addComponent(pnlDashLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDashMid, javax.swing.GroupLayout.DEFAULT_SIZE, 1479, Short.MAX_VALUE))
            .addComponent(pnlDashTop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlDashBackLayout.setVerticalGroup(
            pnlDashBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDashBackLayout.createSequentialGroup()
                .addComponent(pnlDashTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDashBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlDashLeft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDashMid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        getContentPane().add(pnlDashBack, java.awt.BorderLayout.CENTER);

        mnuAdmin.setText("R E P O R T S");

        mnuAll.setText("All Test Report");
        mnuAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAllActionPerformed(evt);
            }
        });
        mnuAdmin.add(mnuAll);

        mnuPosstive.setText("Possitve Cases");
        mnuPosstive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPosstiveActionPerformed(evt);
            }
        });
        mnuAdmin.add(mnuPosstive);

        mnuNegativeCases.setText("Negative Cases");
        mnuNegativeCases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNegativeCasesActionPerformed(evt);
            }
        });
        mnuAdmin.add(mnuNegativeCases);

        mnuRBNIC.setText("Report by Test ID");
        mnuRBNIC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRBNICActionPerformed(evt);
            }
        });
        mnuAdmin.add(mnuRBNIC);

        mnuRBD.setText("Report by Date");
        mnuRBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRBDActionPerformed(evt);
            }
        });
        mnuAdmin.add(mnuRBD);

        jMenuBar1.add(mnuAdmin);

        jMenu1.setText("    I N S E R T D A T A");

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem5.setText("INSERT TEST DATA");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:


    }//GEN-LAST:event_formWindowOpened

    private void btnAllTestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAllTestMouseClicked
        // TODO add your handling code here:
        try {
            pnlDashMid.removeAll();
              double all = ChartManagement.getAllTestCount();
              double neg = ChartManagement.getNegativeTestCount();
              double nt = ChartManagement.getNotTestedTestCount();
              double pos = ChartManagement.getPossitiveTestCount();

            DefaultPieDataset pieDataSet = new DefaultPieDataset();
            pieDataSet.setValue("Negative", ( neg / all));
            pieDataSet.setValue("Not Tested", ( nt / all));
            pieDataSet.setValue("Possitive", ( pos / all));

            JFreeChart chart = ChartFactory.createPieChart3D("According to All Tests", pieDataSet, true, true, true);
            PiePlot3D p = (PiePlot3D) chart.getPlot();

            
            // p.setForegroundAlpha(TOP_ALIGNMENT);
            ChartPanel cp = new ChartPanel(chart);
            cp.setBackground(new Color(0, 255, 255));
            pnlDashMid.add(cp);

            cp.setVisible(true);
        } catch (ArithmeticException e) {
            JOptionPane.showMessageDialog(MessageManagement.getVisibleContent(), "No data in the database\nInput data to view chart", "Test Details Management ", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(MessageManagement.getVisibleContent(), "Data Transit Failed \n\r" + e.getClass() + "\n\r" + e.getMessage(), "Test Details Management", JOptionPane.INFORMATION_MESSAGE);
        }

        //cp.setSize(450, 500);
        //ChartFrame frame = new ChartFrame("Pie chart", chart);           
        //frame.setVisible(true);
        //frame.setSize(450, 500);

    }//GEN-LAST:event_btnAllTestMouseClicked

    @SuppressWarnings("deprecation")
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:

        LabDataEntryForm dataentryform = new LabDataEntryForm();
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - dataentryform.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - dataentryform.getHeight()) / 2);
        dataentryform.setLocation(x, y);

        dataentryform.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void btnAllTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllTestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAllTestActionPerformed

    private void mnuRBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRBDActionPerformed
        // TODO add your handling code here:
        SelectDateRange dialog = new SelectDateRange(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_mnuRBDActionPerformed

    private void btnPossitiveDistrictMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPossitiveDistrictMouseClicked

       try {
            pnlDashMid.removeAll();
            double all = ChartManagement.getAllTestCount();
            double neg = ChartManagement.getNegativeTestCount();
            double nt = ChartManagement.getNotTestedTestCount();
            double pos = ChartManagement.getPossitiveTestCount();
            double tes = all - nt;
  
            

            DefaultPieDataset pieDataSet = new DefaultPieDataset();
            pieDataSet.setValue("Negative", (neg/tes));
            pieDataSet.setValue("Possitive",(pos/tes));

            JFreeChart chart = ChartFactory.createPieChart3D("According to Completed Tests", pieDataSet, true, true, true);
            PiePlot3D p = (PiePlot3D) chart.getPlot();

           
            // p.setForegroundAlpha(TOP_ALIGNMENT);
            ChartPanel cp = new ChartPanel(chart);
            cp.setBackground(new Color(0, 255, 255));
            pnlDashMid.add(cp);

            cp.setVisible(true);
        } catch (ArithmeticException e) {
            JOptionPane.showMessageDialog(MessageManagement.getVisibleContent(), "No data in the database\nInput data to view chart", "Test Details Management ", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(MessageManagement.getVisibleContent(), "Data Transit Failed \n\r" + e.getClass() + "\n\r" + e.getMessage(), "Test Details Management", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_btnPossitiveDistrictMouseClicked

    private void mnuRBNICActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRBNICActionPerformed
        // TODO add your handling code here:
        GetTestId dialog = new GetTestId(this, true);

        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - dialog.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - dialog.getHeight()) / 2);
        dialog.setLocation(x, y);

        dialog.setVisible(true);
    }//GEN-LAST:event_mnuRBNICActionPerformed

    private void mnuNegativeCasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNegativeCasesActionPerformed
        // TODO add your handling code here:

        try {
            String sql = "SELECT * FROM tbl_testinfo WHERE status='Negative'";
            String design = "E:\\EAD CW2 CODSE201f-038\\EAD_CW_2-pcr management system\\src\\Reports\\AllTopThree.jrxml";
            ManageReports.genarateReports(sql, design);
        } catch (Exception ex) {
            
            JOptionPane.showMessageDialog(MessageManagement.getVisibleContent(), "Data Transit Failed \n\r" + ex.getClass() + "\n\r" + ex.getMessage(), "Test Details Management", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_mnuNegativeCasesActionPerformed

    private void mnuPosstiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPosstiveActionPerformed
        // TODO add your handling code here:
        try {
            String sql = "SELECT * FROM tbl_testinfo WHERE status='Possitive'";
            String design = "E:\\EAD CW2 CODSE201f-038\\EAD_CW_2-pcr management system\\src\\Reports\\AllTopThree.jrxml";
            ManageReports.genarateReports(sql, design);
        } catch (Exception ex) {
           
        }
    }//GEN-LAST:event_mnuPosstiveActionPerformed

    private void mnuAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAllActionPerformed
        // TODO add your handling code here:
        try {
            String sql = "SELECT * FROM tbl_testinfo";
            String design = "E:\\EAD CW2 CODSE201f-038\\EAD_CW_2-pcr management system\\src\\Reports\\AllTopThree.jrxml";
            ManageReports.genarateReports(sql, design);
        } catch (Exception ex) {
           // Logger.getLogger(GetTestId.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(MessageManagement.getVisibleContent(), "Data Transit Failed \n\r" + ex.getClass() + "\n\r" + ex.getMessage(), "Test Details Management", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_mnuAllActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        try {

            String url = "https://www.worldometers.info/coronavirus/country/sri-lanka/";
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        } catch (Exception e) {
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnAllTestMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAllTestMouseEntered
        // TODO add your handling code here:
        btnAllTest.setBackground(new Color(127, 255, 212));
        btnAllTest.setForeground(Color.BLACK);
    }//GEN-LAST:event_btnAllTestMouseEntered

    private void btnAllTestMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAllTestMouseExited
        // TODO add your handling code here:
        btnAllTest.setBackground(new Color(0, 66, 54));
        btnAllTest.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnAllTestMouseExited

    private void btnPossitiveDistrictMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPossitiveDistrictMouseEntered
        // TODO add your handling code here:
        btnPossitiveDistrict.setBackground(new Color(127, 255, 212));
        btnPossitiveDistrict.setForeground(Color.BLACK);
    }//GEN-LAST:event_btnPossitiveDistrictMouseEntered

    private void btnPossitiveDistrictMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPossitiveDistrictMouseExited
        // TODO add your handling code here:
        btnPossitiveDistrict.setBackground(new Color(0, 66, 54));
        btnPossitiveDistrict.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnPossitiveDistrictMouseExited

    private void btnTestedTestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTestedTestMouseClicked
        // TODO add your handling code here:
      try{  float all = (float) ChartManagement.getPossitiveTestCount();
        float northan =(float) ChartManagement.getProvincePossitiveTestCount("Northern");
        float northwestern =(float) ChartManagement.getProvincePossitiveTestCount("NorthWestern");
        float western=(float) ChartManagement.getProvincePossitiveTestCount("Western");
        float northcentral=(float) ChartManagement.getProvincePossitiveTestCount("NorthCentral");
        float central=(float) ChartManagement.getProvincePossitiveTestCount("Central");
        float sabaragamuwa=(float) ChartManagement.getProvincePossitiveTestCount("Sabaragamuwa");
        float eastern=(float) ChartManagement.getProvincePossitiveTestCount("Eastern");
        float uva=(float) ChartManagement.getProvincePossitiveTestCount("Uva");
        float southern=(float) ChartManagement.getProvincePossitiveTestCount("Southern");
        
        
            DefaultPieDataset pieDataSet = new DefaultPieDataset();
          pieDataSet.setValue("Northern", (northan / all));
          pieDataSet.setValue("NorthWestern", (northwestern / all));
          pieDataSet.setValue("Western", (western/ all));
          pieDataSet.setValue("NorthCentral", (northcentral/ all));
          pieDataSet.setValue("Central", (central / all));
          pieDataSet.setValue("Sabaragamuwa", (sabaragamuwa / all));
          pieDataSet.setValue("Eastern", (eastern / all));
          pieDataSet.setValue("Uva", (uva / all));
          pieDataSet.setValue("Southern", (southern / all));

            JFreeChart chart = ChartFactory.createPieChart3D("Possitive Precentage from each Province", pieDataSet, true, true, true);
            PiePlot3D p = (PiePlot3D) chart.getPlot();

           
            // p.setForegroundAlpha(TOP_ALIGNMENT);
            ChartPanel cp = new ChartPanel(chart);
            cp.setBackground(new Color(0, 255, 255));
            pnlDashMid.add(cp);

            cp.setVisible(true);
        } catch (ArithmeticException e) {
            JOptionPane.showMessageDialog(MessageManagement.getVisibleContent(), "No data in the database\nInput data to view chart", "Test Details Management ", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(MessageManagement.getVisibleContent(), "Data Transit Failed \n\r" + e.getClass() + "\n\r" + e.getMessage(), "Test Details Management", JOptionPane.INFORMATION_MESSAGE);
        }
        
        
        
        
        
        
    }//GEN-LAST:event_btnTestedTestMouseClicked

    private void btnTestedTestMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTestedTestMouseEntered
        // TODO add your handling code here:
       btnTestedTest.setBackground(new Color(127, 255, 212));
       btnTestedTest.setForeground(Color.BLACK);
    }//GEN-LAST:event_btnTestedTestMouseEntered

    private void btnTestedTestMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTestedTestMouseExited
        // TODO add your handling code here:
          btnTestedTest.setBackground(new Color(0, 66, 54));
          btnTestedTest.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnTestedTestMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new DashBoard().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllTest;
    private javax.swing.JButton btnPossitiveDistrict;
    private javax.swing.JButton btnTestedTest;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblTime;
    private javax.swing.JMenu mnuAdmin;
    private javax.swing.JMenuItem mnuAll;
    private javax.swing.JMenuItem mnuNegativeCases;
    private javax.swing.JMenuItem mnuPosstive;
    private javax.swing.JMenuItem mnuRBD;
    private javax.swing.JMenuItem mnuRBNIC;
    private java.awt.Panel pnlDashBack;
    private javax.swing.JPanel pnlDashLeft;
    private javax.swing.JPanel pnlDashMid;
    private javax.swing.JPanel pnlDashTop;
    // End of variables declaration//GEN-END:variables
}
